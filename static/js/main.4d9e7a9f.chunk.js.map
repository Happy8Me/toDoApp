{"version":3,"sources":["redux/todoSlice.js","InputTodo.js","TodoItem.js","ListTodos.js","utils/enums.js","FilteredItem.js","Footer.js","ToggleTodos.js","App.js","redux/store.js","index.js"],"names":["todoSlice","createSlice","name","initialState","reducers","addTodo","state","action","id","Date","now","title","payload","completed","toggleTodo","index","findIndex","todo","deleteTodo","splice","clearAllCompletedTodos","filter","toggleAllTodos","every","map","updateTodo","value","actions","InputTodo","useState","setValue","dispatch","useDispatch","className","onChange","e","target","onKeyDown","key","trim","placeholder","TodoItem","editing","setEditing","classNameCompleted","classNameEditing","editRef","useRef","useEffect","current","focus","type","checked","onDoubleClick","onClick","ref","onBlur","console","log","ListTodos","todos","FilteredItem","item","updateFilter","href","preventDefault","FilterConfig","Footer","activeTodosCount","useSelector","length","filterItem","ToggleTodos","isAllCompleted","htmlFor","App","setFilter","filteredTodos","filterValue","store","configureStore","reducer","todoReducer","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.4d9e7a9f.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = [\r\n    {\r\n        \"id\": 1,\r\n        \"title\": \"1\",\r\n        \"completed\": false\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"title\": \"2\",\r\n        \"completed\": false\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"title\": \"3\",\r\n        \"completed\": false\r\n    }\r\n]\r\n\r\nconst todoSlice = createSlice({\r\n    name: \"todos\",\r\n    initialState,\r\n    reducers: {\r\n        addTodo: (state, action) => {\r\n            const newTodo = {\r\n                id: Date.now(),\r\n                title: action.payload.title,\r\n                completed: false\r\n            };\r\n            return [newTodo, ...state]\r\n        },\r\n        toggleTodo: (state, action) => {\r\n            const index = state.findIndex( (todo) => { return todo.id === action.payload.id} );\r\n            state[index].completed = action.payload.completed;\r\n        },\r\n        deleteTodo: (state, action) => {\r\n            const index = state.findIndex( (todo) => { return todo.id === action.payload.id} );\r\n            state.splice(index, 1)\r\n        },\r\n        clearAllCompletedTodos: (state) => {        \r\n            return state.filter(todo => todo.completed === false)\r\n        },\r\n        toggleAllTodos: (state) => {\r\n            const allCompleted = state.every(todo => {return todo.completed === true});\r\n            if(allCompleted) {\r\n                state.map(todo => todo.completed = false)\r\n            } else {\r\n                state.map(todo => todo.completed = true)\r\n            }\r\n        },\r\n        updateTodo: (state, action) => {\r\n            const index = state.findIndex( (todo) => { return todo.id === action.payload.id} );\r\n            state[index].title = action.payload.value;\r\n        },\r\n    }\r\n});\r\n\r\nexport const { \r\n    addTodo, \r\n    toggleTodo, \r\n    deleteTodo,\r\n    toggleAllTodos, \r\n    updateTodo,\r\n    clearAllCompletedTodos,\r\n} = todoSlice.actions;\r\n\r\nexport default todoSlice.reducer;\r\n\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTodo } from './redux/todoSlice';\r\n\r\nexport function InputTodo() {\r\n\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <input \r\n      className=\"new-todo\" \r\n      value={value}\r\n      onChange={(e) => setValue(e.target.value)}\r\n      onKeyDown={(e) => {\r\n        if(e.key === \"Enter\") {\r\n          if(e.target.value.trim()){\r\n            dispatch(addTodo({\r\n              title: value,\r\n            }))\r\n          }\r\n          setValue(\"\");\r\n        }\r\n      }} \r\n      placeholder=\"What needs to be done?\" \r\n    />\r\n  );\r\n}\r\n","import {useState, useRef, useEffect} from \"react\";\nimport { useDispatch } from 'react-redux';\nimport { toggleTodo, deleteTodo, updateTodo } from './redux/todoSlice';\n\nexport function TodoItem({ title, id, completed }) {\n\n  const [editing, setEditing] = useState(false);\n  const [value, setValue] = useState(title);\n  const classNameCompleted = completed ? \"completed\" : \"\";\n  const classNameEditing = editing ? \"editing\" : \"\";\n  const editRef = useRef();\n\n  const dispatch = useDispatch();\n\n  const handleToggleTodo = () => {\n    dispatch( toggleTodo( {id: id, completed: !completed} ) );\n  }\n\n  const handleDeleteTodo = () => {\n    dispatch( deleteTodo( {id} ) )\n  }\n\n  const handleUpdateTodo = () => {\n    dispatch( updateTodo( {id, value} ) )\n    setEditing(false);\n  }\n\n  useEffect(() => {\n    if(editing) {\n      editRef.current.focus();\n    }\n  }, [editing])\n\n  return (\n    <li className={`${classNameCompleted} ${classNameEditing}`}>\n      <div className=\"view\">\n        <input\n          onChange={handleToggleTodo}\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={completed}\n        />\n        <label \n            onDoubleClick={() => {\n            if(!completed) setEditing(true)\n          }}\n        >{title}</label>\n        <button \n          type=\"button\" \n          className=\"destroy\" \n          onClick={handleDeleteTodo}>\n        </button>\n      </div>\n      <input \n        type=\"text\" \n        className=\"edit\" \n        value={value} \n        ref={editRef}\n        onBlur={() => {\n          setEditing(false);\n          console.log(value)\n          !completed && handleUpdateTodo();\n        }}\n        onChange={(e) => {\n          setValue(e.target.value)\n        }\n        }\n      />\n    </li>\n  );\n}\n","import React from 'react';\r\nimport { TodoItem } from \"./TodoItem\";\r\n\r\nexport function ListTodos({todos}) {\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {todos.map(todo => {\r\n        return <TodoItem \r\n        key={todo.id} \r\n        id={todo.id}\r\n        title={todo.title}\r\n        completed={todo.completed}\r\n        />\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n","export const FilterStatus = {\r\n    ALL: \"all\",\r\n    ACTIVE: \"active\",\r\n    COMPLETED: \"completed\"\r\n}","export const FilteredItem = ( {filter, item, updateFilter} ) => {\r\n    return (\r\n        <li>\r\n          <a \r\n            href=\"/\" \r\n            className={filter === item.id ? \"selected\" : \"\"}\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              updateFilter(item.id)\r\n            }}\r\n          >\r\n            {item.title}</a>\r\n        </li>\r\n    )\r\n};","import { useSelector, useDispatch } from 'react-redux';\nimport { clearAllCompletedTodos } from './redux/todoSlice';\nimport { FilterStatus } from './utils/enums';\nimport { FilteredItem } from './FilteredItem';\n\nconst FilterConfig = [\n  {\n    title: \"All\",\n    id: FilterStatus.ALL\n  },\n  {\n    title: \"Active\",\n    id: FilterStatus.ACTIVE\n  },\n  {\n    title: \"Completed\",\n    id: FilterStatus.COMPLETED\n  }\n]\n\nexport function Footer ({updateFilter, filter}) {\n\n  const activeTodosCount = useSelector((state) => {\n    return state.todos.filter(todo => todo.completed === false).length\n  });\n\n  const todos = useSelector(state => state.todos);\n\n  const dispatch = useDispatch();\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{ activeTodosCount }</strong> items left\n      </span>\n      <ul className=\"filters\">\n        {FilterConfig.map(filterItem => (\n          <FilteredItem \n            key={filterItem.id}\n            item={filterItem}\n            filter={filter}\n            updateFilter={updateFilter}\n          />\n        ))}\n      </ul>\n      { \n        <button \n          className=\"clear-completed\"\n          onClick={(e) => {\n            e.preventDefault();\n            dispatch(clearAllCompletedTodos())\n          }}  \n        >\n        Clear completed</button> }\n    </footer>\n  )\n};\n","import { useDispatch } from 'react-redux';\r\nimport { toggleAllTodos } from './redux/todoSlice';\r\n\r\nexport function ToggleTodos({ isAllCompleted }) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        checked={isAllCompleted}\r\n        id=\"toggle-all\"\r\n        className=\"toggle-all\"\r\n        type=\"checkbox\"\r\n        onChange={(e) => dispatch(toggleAllTodos())}\r\n      />\r\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\r\n    </>\r\n  );\r\n}\r\n","import \"./styles.css\";\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { InputTodo } from './InputTodo';\nimport { ListTodos } from './ListTodos';\nimport { Footer } from './Footer';\nimport { ToggleTodos } from './ToggleTodos';\n\nexport default function App() {\n\n  const [filter, setFilter] = useState(\"all\");\n  const todos = useSelector(state => state.todos)\n  const isAllCompleted = (todos.filter(todo => todo.completed).length === todos.length)\n  const updateFilter = (filterValue) => {\n    setFilter(filterValue)\n  }\n\n  const filteredTodos = todos.filter(todo => {\n    switch(filter) {\n      case \"active\":\n        return !todo.completed;\n      case \"completed\":\n        return todo.completed === true;\n      case \"all\":\n        return todo;\n    }\n  })\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <InputTodo />\n      </header>\n      <section className=\"main\">\n        {todos.length > 0 && (<ToggleTodos isAllCompleted={isAllCompleted}/>)}  \n        <ListTodos todos={filteredTodos}/>\n      </section>\n      {todos.length > 0 && (\n        <Footer \n          updateFilter={updateFilter}\n          filter={filter}\n        />\n      )}\n    </section>\n  );\n}\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport todoReducer from './todoSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        todos: todoReducer,\r\n    }\r\n})\r\n\r\n\r\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}